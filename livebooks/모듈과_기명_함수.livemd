# 모듈과 기명 함수

## 모듈 컴파일하기

예제 파일을 컴파일해서 IEx에 로드하는 방법은 두 가지가 있다. 첫 번째 방법은 `iex`를 실행하면서 불러올 엘릭서 소스 파일을 넣어주는 것이다.

```
$ iex times.exs
```

또는 이미 iex가 실행 중인 경우 `c` 헬퍼 함수를 이용해 명령줄로 나가지 않더라도 파일을 컴파일할 수 있다.

```
iex> c "times.exs"
```

## 함수의 본문은 블록이다.

`do...end` 블록은 여러 줄의 표현식을 한데 묶어 다른 코드로 전달하는 한 가지 방법이다. 하지만 do..end는 엘릭서의 기본 문법이 아닌 개발자의 편의를 위한 문법이다.

```elixir
defmodule Times do
  def double(n), do: n * 2
end
```

<!-- livebook:{"output":true} -->

```
{:module, Times, <<70, 79, 82, 49, 0, 0, 5, ...>>, {:double, 1}}
```

```elixir
defmodule InlineTimes, do: def(double(n), do: n * 2)
```

<!-- livebook:{"output":true} -->

```
{:module, InlineTimes, <<70, 79, 82, 49, 0, 0, 5, ...>>, {:double, 1}}
```

따라서 위 두 코드는 동일하게 평가되지만, 후자의 경우 추천하지 않는 방식이다.

## 함수 호출과 패턴 매칭

앞서 익명 함수를 알아보면서 파라미터를 실제 인자에 바인딩할 때 패턴 매칭이 어떻게 적용되는지 살펴봤고, 기명 함수에도 같은 규칙이 적용된다. 다른 점은 기명 함수의 경우 여러 구현을 정의할 때 각각의 파라미터와 본문을 가진 함수를 따로 작성해야 한다는 점이다.

```elixir
defmodule Factorial do
  def of(0), do: 1
  def of(n), do: n * of(n - 1)
end

Factorial.of(10)
```

<!-- livebook:{"output":true} -->

```
3628800
```

위 코드처럼 엘릭서에서 재귀를 이용해 설계하고 코딩하는 패턴은 매우 일반적이지만, 정의를 옮길 때 어떤 순서로 쓰는지에 따라 결과가 달라질 수 있다. 엘릭서는 함수들에 대해 패턴 매칭을 수행할 때 코드의 위에서 아래 순서로 확인하기 때문에 주의해야 한다.

```elixir
defmodule BadFactorial do
  def of(n), do: n * of(n - 1)
  def of(0), do: 1
end
```

<!-- livebook:{"output":true} -->

```
warning: this clause for of/1 cannot match because a previous clause at line 2 always matches
  #cell:gkod7g5sdoopgtbslneeii3fdmcfiykx:3

```

<!-- livebook:{"output":true} -->

```
{:module, BadFactorial, <<70, 79, 82, 49, 0, 0, 5, ...>>, {:of, 1}}
```

`BadFactorial`의 경우 가장 처음 만나는 집합이 하위 집합을 모두 포함하기 때문에 엘릭서의 패턴 매칭은 다음 패턴에 매칭될 수 없다.
